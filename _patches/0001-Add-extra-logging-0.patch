From b11d52e2dc9de1dd4c5263c6f974a12178cd6034 Mon Sep 17 00:00:00 2001
From: Zontreck <tara@zontreck.dev>
Date: Tue, 25 Aug 2020 16:45:23 -0700
Subject: [PATCH] Add extra logging

---
 indra/llcommon/CMakeLists.txt    |    2 +
 indra/llcommon/llsdserialize.cpp |   25 +-
 indra/llcommon/zcount.cpp        |   25 +
 indra/llcommon/zcount.h          |   20 +
 5 files changed, 585 insertions(+), 515 deletions(-)
 create mode 100644 indra/llcommon/zcount.cpp
 create mode 100644 indra/llcommon/zcount.h

diff --git a/indra/llcommon/CMakeLists.txt b/indra/llcommon/CMakeLists.txt
index cd59780a0f..b162cfb7af 100644
--- a/indra/llcommon/CMakeLists.txt
+++ b/indra/llcommon/CMakeLists.txt
@@ -29,6 +29,7 @@ include_directories(
 
 set(llcommon_SOURCE_FILES
     indra_constants.cpp
+    zcount.cpp
     llallocator.cpp
     llallocator_heap_profile.cpp
     llapp.cpp
@@ -128,6 +129,7 @@ set(llcommon_HEADER_FILES
     ctype_workaround.h
     fix_macros.h
     indra_constants.h
+    zcount.h
     linden_common.h
     llalignedarray.h
     llallocator.h
diff --git a/indra/llcommon/llsdserialize.cpp b/indra/llcommon/llsdserialize.cpp
index d74ee0bc85..961717f343 100644
--- a/indra/llcommon/llsdserialize.cpp
+++ b/indra/llcommon/llsdserialize.cpp
@@ -49,6 +49,10 @@
 #include "llstring.h"
 #include "lluri.h"
 
+#include "zcount.h"
+#include <fstream>
+
+
 // File constants
 static const int MAX_HDR_LEN = 20;
 static const S32 UNZIP_LLSD_MAX_DEPTH = 96;
@@ -69,22 +73,31 @@ const std::string LLSD_NOTATION_HEADER("llsd/notation");
 void LLSDSerialize::serialize(const LLSD& sd, std::ostream& str, ELLSD_Serialize type,
 							  LLSDFormatter::EFormatterOptions options)
 {
+	// serialize to a file as well
+	// Use the zCounter singleton
+    std::ofstream filewrite;
+    filewrite.open("Log-ToLLSD-" + std::to_string(zCount::GetCurrentAndInc()) + ".txt");
+
+
 	LLPointer<LLSDFormatter> f = NULL;
 
 	switch (type)
 	{
 	case LLSD_BINARY:
 		str << "<? " << LLSD_BINARY_HEADER << " ?>\n";
+        filewrite << "<? " << LLSD_BINARY_HEADER << " ?>\n";
 		f = new LLSDBinaryFormatter;
 		break;
 
 	case LLSD_XML:
-		str << "<? " << LLSD_XML_HEADER << " ?>\n";
+        str << "<? " << LLSD_XML_HEADER << " ?>\n";
+        filewrite << "<? " << LLSD_XML_HEADER << " ?>\n";
 		f = new LLSDXMLFormatter;
 		break;
 
     case LLSD_NOTATION:
         str << "<? " << LLSD_NOTATION_HEADER << " ?>\n";
+        filewrite << "<? " << LLSD_NOTATION_HEADER << " ?>\n";
         f = new LLSDNotationFormatter;
         break;
 
@@ -95,12 +108,17 @@ void LLSDSerialize::serialize(const LLSD& sd, std::ostream& str, ELLSD_Serialize
 	if (f.notNull())
 	{
 		f->format(sd, str, options);
+        f->format(sd, filewrite);
 	}
+
+	filewrite.close();
 }
 
 // static
 bool LLSDSerialize::deserialize(LLSD& sd, std::istream& str, S32 max_bytes)
 {
+    std::ofstream filewrite;
+    filewrite.open("Log-FromLLSD-" + std::to_string(zCount::GetCurrentAndInc()) + ".txt");
 	LLPointer<LLSDParser> p = NULL;
 	char hdr_buf[MAX_HDR_LEN + 1] = ""; /* Flawfinder: ignore */
 	int i;
@@ -164,6 +182,8 @@ bool LLSDSerialize::deserialize(LLSD& sd, std::istream& str, S32 max_bytes)
 		x->parsePart(hdr_buf, inbuf);	// Parse the first part that was already read
 		x->parseLines(str, sd);			// Parse the rest of it
 		delete x;
+        filewrite << sd.asString();
+        filewrite.close();
 		return true;
 	}
 
@@ -187,6 +207,9 @@ bool LLSDSerialize::deserialize(LLSD& sd, std::istream& str, S32 max_bytes)
 	if (p.notNull())
 	{
 		p->parse(str, sd, max_bytes);
+
+		filewrite << sd.asString();
+        filewrite.close();
 		return true;
 	}
 
diff --git a/indra/llcommon/zcount.cpp b/indra/llcommon/zcount.cpp
new file mode 100644
index 0000000000..c512522963
--- /dev/null
+++ b/indra/llcommon/zcount.cpp
@@ -0,0 +1,25 @@
+#include "zcount.h"
+
+zCount *zCount::ptrInst = nullptr;
+
+zCount::zCount() { 
+    counter = 0; 
+}
+zCount::~zCount() { 
+    counter = 0;
+    ptrInst = nullptr;
+}
+
+void zCount::Terminate()
+{
+    delete ptrInst;
+    ptrInst = nullptr;
+}
+
+int zCount::GetCurrentAndInc()
+{
+    int tmp = zCount::counter;
+    zCount::counter++;
+
+    return tmp;
+}
\ No newline at end of file
diff --git a/indra/llcommon/zcount.h b/indra/llcommon/zcount.h
new file mode 100644
index 0000000000..f6108b3df2
--- /dev/null
+++ b/indra/llcommon/zcount.h
@@ -0,0 +1,20 @@
+#pragma once
+
+class zCount
+{
+  public:
+    static int GetCurrentAndInc();
+    static void Terminate();
+  private:
+    static int counter;
+    static zCount *ptrInst;
+    static zCount &Instance()
+    {
+        if (!ptrInst) {
+            ptrInst = new zCount();
+        }
+        return *ptrInst;
+    }
+    ~zCount();
+    zCount();
+};
\ No newline at end of file
-- 
2.27.0.windows.1

